'''
16 80
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
'''

bit_pattern = {
    '0001101' : 0,
    '0011001' : 1,
    '0010011' : 2,
    '0111101' : 3,
    '0100011' : 4,
    '0110001' : 5,
    '0101111' : 6,
    '0111011' : 7,
    '0110111' : 8,
    '0001011' : 9,
}

T = int(input())
for tc in range(1, T+1):
    #배열의 세로, 가로
    N, M = map(int, input().split())
    arr = [input() for _ in range(N)]
    # print(arr)

    # 코드가 써있는 한 줄 구하기
    code = ''
    for i in range(len(arr)):
        if int(arr[i]) == 0:
            pass
        else:
            code = arr[i]
            break

    # 56자리의 코드가 필요하다.
    # 모든 패턴은 1로 끝나기 때문에 종료지점을 파악한다.
    while True:
        if code[-1] == '0':
            code = code[:len(code)-1]
        else: 
            break

    # 코드는 56자리 이므로 필요한 부분만 남긴다.
    code = code[len(code)-56 : len(code)]
    #합이 10의 배수이면 정상적인 암호다.
    total = 0
    # 정상적인 암호일 때 출력할 값
    result = 0

    #56개의 코드를 7개 씩 끊어서 패턴 확인
    for i in range(8):
        tmp = bit_pattern[code[7 * i:7 * i + 7]]
        if i % 2 == 0:
            total += (tmp * 3)

        else:
            total += tmp
        result += tmp

    if total % 10 == 0:
        print(f'#{tc} {result}')
    else:
        print(f'#{tc} 0')